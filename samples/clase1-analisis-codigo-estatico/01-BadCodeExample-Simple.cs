using System;

namespace AnalisisEstatico.Ejercicios.Simple
{
    /// <summary>
    /// EJERCICIO SIMPLE: C√≥digo con problemas b√°sicos para desarrolladores Jr
    /// 
    /// INSTRUCCIONES:
    /// 1. Copia este c√≥digo en Visual Studio
    /// 2. Instala SonarLint (Extensions -> SonarLint for Visual Studio)
    /// 3. Observa las l√≠neas subrayadas de colores
    /// 4. Ve a View -> Error List para ver los problemas
    /// 5. Arregla cada problema uno por uno
    /// 6. Compara con la soluci√≥n en 01-BadCodeExample-Simple-After.cs
    /// 
    /// PROBLEMAS QUE VAS A ENCONTRAR:
    /// üî¥ Variables que no usas
    /// üî¥ Nombres de m√©todos incorrectos
    /// üî¥ Comparaciones raras con true/false
    /// üî¥ N√∫meros "m√°gicos" (sin explicaci√≥n)
    /// üî¥ Texto concatenado de forma lenta
    /// 
    /// TIEMPO: 20-30 minutos
    /// </summary>
    public class CustomerService
    {
        // ‚ùå PROBLEMA 1: Esta variable no se usa para nada
        private string region = "North";

        // ‚ùå PROBLEMA 2: Este texto nunca cambia, deber√≠a ser constante
        private string companyName = "MiEmpresa";

        /// <summary>
        /// Saluda al cliente
        /// </summary>
        /// <param name="customerName">Nombre del cliente</param>
        public void SaludarCliente(string customerName)
        {
            // ‚ùå PROBLEMA 3: No validamos si customerName es null
            // ¬øQu√© pasa si alguien pasa null?

            // ‚ùå PROBLEMA 4: Esta variable nunca cambia, deber√≠a ser constante
            string saludo = "Hola";

            // ‚ùå PROBLEMA 5: Esta forma de unir texto es lenta
            Console.WriteLine(saludo + ", " + customerName + "!");

            // ‚ùå PROBLEMA 6: No necesitas escribir 'this.'
            Console.WriteLine(this.companyName);
        }

        /// <summary>
        /// Revisa si el cliente est√° activo
        /// </summary>
        /// <param name="estaActivo">¬øEl cliente est√° activo?</param>
        /// <returns>true si est√° activo, false si no</returns>
        public bool RevisarCliente(bool estaActivo)
        {
            // ‚ùå PROBLEMA 7: ¬øPara qu√© comparar con true?
            if (estaActivo == true)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        /// <summary>
        /// Calcula descuento del cliente
        /// </summary>
        /// <param name="precio">Precio original</param>
        /// <param name="tipoCliente">Tipo de cliente (1, 2, o 3)</param>
        /// <returns>Descuento calculado</returns>
        public decimal calcularDescuento(decimal precio, int tipoCliente)
        {
            // ‚ùå PROBLEMA 8: Nombre del m√©todo deber√≠a empezar con may√∫scula
            // ‚ùå PROBLEMA 9: ¬øQu√© significan estos n√∫meros?
            switch (tipoCliente)
            {
                case 1:
                    return precio * 0.05m; // ¬ø5% de qu√©?
                case 2:
                    return precio * 0.10m; // ¬ø10% de qu√©?
                case 3:
                    return precio * 0.15m; // ¬ø15% de qu√©?
                default:
                    return 0;
            }
        }

        /// <summary>
        /// Procesa datos del cliente
        /// </summary>
        /// <param name="datos">Datos del cliente</param>
        public void ProcesarDatos(string datos)
        {
            try
            {
                // ‚ùå PROBLEMA 10: ¬øQu√© pasa si datos es null o vac√≠o?
                var resultado = 100 / datos.Length;
                Console.WriteLine(resultado);
            }
            catch (Exception ex)
            {
                // ‚ùå PROBLEMA 11: Atrapamos todos los errores, pero no hacemos nada
                // Esto es malo porque "esconde" los problemas
            }
        }

        /// <summary>
        /// Decide si aprobar un cr√©dito
        /// </summary>
        /// <param name="edad">Edad del cliente</param>
        /// <param name="ingresos">Ingresos mensuales</param>
        /// <param name="tieneCredito">¬øYa tiene cr√©dito?</param>
        /// <returns>true si se aprueba, false si no</returns>
        public bool AprobarCredito(int edad, decimal ingresos, bool tieneCredito)
        {
            // ‚ùå PROBLEMA 12: Demasiadas condiciones anidadas (una dentro de otra)
            // Es dif√≠cil de leer y entender
            if (edad >= 18)
            {
                if (edad <= 65)
                {
                    if (ingresos > 30000)
                    {
                        if (tieneCredito == false)
                        {
                            if (ingresos > 50000)
                            {
                                return true;
                            }
                            else
                            {
                                if (edad > 25)
                                {
                                    return true;
                                }
                            }
                        }
                        else
                        {
                            if (ingresos > 60000)
                            {
                                return true;
                            }
                        }
                    }
                }
            }
            return false;
        }
    }

    /*
    EJERCICIO PASO A PASO:
    
    1. INSTALAR SONARLINT:
       - Ve a Extensions -> Manage Extensions
       - Busca "SonarLint" 
       - Instala y reinicia Visual Studio
    
    2. VER LOS PROBLEMAS:
       - Ve a View -> Error List
       - Ver√°s una lista de problemas
       - Cuenta cu√°ntos problemas encuentras
    
    3. ARREGLAR UNO POR UNO:
       - Haz clic en una l√≠nea con problema
       - Presiona Alt+Enter
       - Ve las sugerencias de arreglo
       - Aplica la correcci√≥n
    
    4. PREGUNTAS PARA REFLEXIONAR:
       - ¬øPor qu√© estos problemas son importantes?
       - ¬øC√≥mo afectan al rendimiento del programa?
       - ¬øQu√© pasar√≠a si otro programador lee este c√≥digo?
    
    5. VALIDAR MEJORAS:
       - Cuando termines, deber√≠as tener 0 problemas
       - El c√≥digo deber√≠a ser m√°s f√°cil de leer
       - Los nombres deber√≠an explicar mejor qu√© hace cada cosa
    
    SIGUIENTE PASO:
    Compara tu resultado con 01-BadCodeExample-Simple-After.cs
    */
}